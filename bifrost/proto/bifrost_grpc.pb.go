// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: bifrost/proto/bifrost.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BifrostClient is the client API for Bifrost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BifrostClient interface {
	Preexec(ctx context.Context, in *PreexecRequest, opts ...grpc.CallOption) (*PreexecResponse, error)
	Precmd(ctx context.Context, in *PrecmdRequest, opts ...grpc.CallOption) (*PrecmdResponse, error)
	ListCommands(ctx context.Context, in *ListCommandsRequest, opts ...grpc.CallOption) (*ListCommandsResponse, error)
}

type bifrostClient struct {
	cc grpc.ClientConnInterface
}

func NewBifrostClient(cc grpc.ClientConnInterface) BifrostClient {
	return &bifrostClient{cc}
}

func (c *bifrostClient) Preexec(ctx context.Context, in *PreexecRequest, opts ...grpc.CallOption) (*PreexecResponse, error) {
	out := new(PreexecResponse)
	err := c.cc.Invoke(ctx, "/Bifrost/Preexec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostClient) Precmd(ctx context.Context, in *PrecmdRequest, opts ...grpc.CallOption) (*PrecmdResponse, error) {
	out := new(PrecmdResponse)
	err := c.cc.Invoke(ctx, "/Bifrost/Precmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostClient) ListCommands(ctx context.Context, in *ListCommandsRequest, opts ...grpc.CallOption) (*ListCommandsResponse, error) {
	out := new(ListCommandsResponse)
	err := c.cc.Invoke(ctx, "/Bifrost/ListCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BifrostServer is the server API for Bifrost service.
// All implementations must embed UnimplementedBifrostServer
// for forward compatibility
type BifrostServer interface {
	Preexec(context.Context, *PreexecRequest) (*PreexecResponse, error)
	Precmd(context.Context, *PrecmdRequest) (*PrecmdResponse, error)
	ListCommands(context.Context, *ListCommandsRequest) (*ListCommandsResponse, error)
	mustEmbedUnimplementedBifrostServer()
}

// UnimplementedBifrostServer must be embedded to have forward compatible implementations.
type UnimplementedBifrostServer struct {
}

func (UnimplementedBifrostServer) Preexec(context.Context, *PreexecRequest) (*PreexecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preexec not implemented")
}
func (UnimplementedBifrostServer) Precmd(context.Context, *PrecmdRequest) (*PrecmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Precmd not implemented")
}
func (UnimplementedBifrostServer) ListCommands(context.Context, *ListCommandsRequest) (*ListCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommands not implemented")
}
func (UnimplementedBifrostServer) mustEmbedUnimplementedBifrostServer() {}

// UnsafeBifrostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BifrostServer will
// result in compilation errors.
type UnsafeBifrostServer interface {
	mustEmbedUnimplementedBifrostServer()
}

func RegisterBifrostServer(s grpc.ServiceRegistrar, srv BifrostServer) {
	s.RegisterService(&Bifrost_ServiceDesc, srv)
}

func _Bifrost_Preexec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreexecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServer).Preexec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bifrost/Preexec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServer).Preexec(ctx, req.(*PreexecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bifrost_Precmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServer).Precmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bifrost/Precmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServer).Precmd(ctx, req.(*PrecmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bifrost_ListCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostServer).ListCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bifrost/ListCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostServer).ListCommands(ctx, req.(*ListCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bifrost_ServiceDesc is the grpc.ServiceDesc for Bifrost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bifrost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bifrost",
	HandlerType: (*BifrostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preexec",
			Handler:    _Bifrost_Preexec_Handler,
		},
		{
			MethodName: "Precmd",
			Handler:    _Bifrost_Precmd_Handler,
		},
		{
			MethodName: "ListCommands",
			Handler:    _Bifrost_ListCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bifrost/proto/bifrost.proto",
}
